{
	"info": {
		"_postman_id": "95741f38-e533-43e7-aa9a-d23b460c9118",
		"name": "coloc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41296159"
	},
	"item": [
		{
			"name": "register",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"password\": \"password123\",\r\n  \"years\": 25\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"register"
					]
				},
				"description": "- Permet d'enregistrer un nouvelle utilisateur. L'email doit etre unique\n    \n- champ obligatoire : firstname, lastname, email, password\n    \n- Le mot de passe est hash\n    \n- Les infos sont a mettre dans le body"
			},
			"response": []
		},
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"johndoe@example.com\",\r\n  \"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"login"
					]
				},
				"description": "- Permet de se connecter a un des compte de la BDD en utilisant l'email et le mot de passe ( les 2 champs sont obligatoire.\n    \n- Les infos sont a mettre dans le body.\n    \n- Si la connexion a réussi on récupere 2 token en échange ( token et refreshToken ) nécéssaire pour les autres actions"
			},
			"response": []
		},
		{
			"name": "refresh",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzM3MzcwNzk4LCJleHAiOjE3Mzc5NzU1OTh9.n44GWpVN3qi-OhsqWcEwdHQghwp7XFyqgyCaJlmi6bA",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/refresh",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"refresh"
					]
				},
				"description": "- Permet de regénérer un token\n    \n- Nécéssite 'refreshToken' comme paramétre dans l'onglet autorization > Bearer Token"
			},
			"response": []
		},
		{
			"name": "getMe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzM3Mzc0OTU2LCJleHAiOjE3MzczNzg1NTZ9.c-t2yOuex4Jj7TrmkYyLcNEr2Hp_KBAmMExu6NWEbBE",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/getMe",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"getMe"
					]
				},
				"description": "- Permet de récuperer les donnéees de l'utilisateur correspond au token du paramétre\n    \n- Nécéssite 'token' comme paramétre dans l'onglet autorization > Bearer Token"
			},
			"response": []
		},
		{
			"name": "delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzM3Mzc2MTA1LCJleHAiOjE3MzczNzk3MDV9.H6gAh3kBZw9bYChN-NzHkxdVNXYSWtjugcwK4QCeCik",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/users/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "- Permet de supprimer un utilisateur en fonction de son id\n    \n- On remplace :id par l'id de l'utilisateur que l'on veut supprimer\n    \n- Nécéssite 'token' comme paramétre dans l'onglet autorization > Bearer Token, Attention si on souhaite supprimé l'utilisateur toto par exemple, on doit se connecté en tant que toto et prendre ce token"
			},
			"response": []
		},
		{
			"name": "colocationAdd",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzM3Mzg0MzkxLCJleHAiOjE3MzczODc5OTF9.Yy6NSzVKxCxIJII3yNlZGY5P597HjcfGhnj30eI2nF8",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"location\": \"Lyon\",\r\n  \"area\": 100,\r\n  \"numberOfRooms\": 3,\r\n  \"ownerOrAgency\": \"agency_name\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/colocations/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"colocations",
						"create"
					]
				},
				"description": "- Permet de créer une nouvelle colocation\n    \n- Nécessite le token du propriétaire de la location ( si toto est le propriétaire, on se connecte en tant que toto et on prend le token )\n    \n- Dans le body on renseigne les informations de la location, champ obligatoire : location (lieu), area, numberOfRoom"
			},
			"response": []
		},
		{
			"name": "colocation",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/colocations/user/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"colocations",
						"user",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "- Permet de récupérer toute les colocations liée l'utilisateur passé dans dans le token\n    \n- On remplace :id dans l'url par l'id de l'utilisateur pour lequel on veut récupérer toute ces colocations"
			},
			"response": []
		},
		{
			"name": "detailColoc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/colocations/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"colocations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "- Permet de récupérer le détail d'une colocation\n    \n- On remplace :id dans l'url par l'id de la colocation que l'on veut récupérer"
			},
			"response": []
		},
		{
			"name": "deleteColoc",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzM3NTU3NTM1LCJleHAiOjE3Mzc1NjExMzV9.2Jo5V2KATI8jsFsNfadqRn5w6xfjO01L7w2Za2ngn5g",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/colocations/delete/:1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"colocations",
						"delete",
						":1"
					],
					"variable": [
						{
							"key": "1",
							"value": ""
						}
					]
				},
				"description": "- Permet de \"supprimé\" une colocation ( en réalité on la déclare juste comme inactive dans la base de données )\n    \n- Nécessite le token du propriétaire de la colocation\n    \n- remplace :id par l'id de la colocation a supprimé"
			},
			"response": []
		},
		{
			"name": "memberAdd",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzM3Mzg0MzkxLCJleHAiOjE3MzczODc5OTF9.Yy6NSzVKxCxIJII3yNlZGY5P597HjcfGhnj30eI2nF8",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"colocationId\": 1,\r\n  \"userId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/members/add",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"members",
						"add"
					]
				},
				"description": "- Permet d'ajouter un membre a une colocation\n    \n- Nécessite le token du propriétaire, a renseigné dans l'onglet autorization > Bearer Token\n    \n- Dans le body on renseigne colocationId ( id de la colocation concerné ) et userId ( l'id du membre que l'on souhaite ajouter )"
			},
			"response": []
		},
		{
			"name": "memberRemove",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzM3Mzg0MzkxLCJleHAiOjE3MzczODc5OTF9.Yy6NSzVKxCxIJII3yNlZGY5P597HjcfGhnj30eI2nF8",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"colocationId\": 1,\r\n  \"userId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/members/remove",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"members",
						"remove"
					]
				},
				"description": "- Permet de supprimer un membre d'une colocation\n    \n- Nécessite le token du propriétaire, a renseigné dans l'onglet autorization > Bearer Token\n    \n- Dans le body on renseigne colocationId ( id de la colocation concerné ) et userId ( l'id du membre que l'on souhaite supprimer )"
			},
			"response": []
		},
		{
			"name": "memberTransfer",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzM3Mzg0MzkxLCJleHAiOjE3MzczODc5OTF9.Yy6NSzVKxCxIJII3yNlZGY5P597HjcfGhnj30eI2nF8",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"colocationId\": 1,\r\n  \"newOwnerId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/members/transfer",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"members",
						"transfer"
					]
				},
				"description": "- Permet de transférer le status de propriétaire a un membre / un autre utilisateur\n    \n- Nécessite le token du propriétaire, a renseigné dans l'onglet autorization > Bearer Token\n    \n- Dans le body on renseigne colocationId ( id de la colocation concerné ) et userId ( l'id du membre que l'on souhaite supprimer )"
			},
			"response": []
		},
		{
			"name": "getProfile",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"colocationId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/members/profile/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"members",
						"profile",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				},
				"description": "- Permet de récuperer le profil d'un membre\n    \n- Dans le body on renseigne colocationId ( id de la colocation concerné ) et userId ( l'id du membre que l'on souhaite supprimer )\n    \n- On remplace :id dans l'url par l'id de l'utilisateur pour lequel on veut récupérer le profile\n    \n- Dans le body, on doit obligatoirement mettre 'colocationId' qui correspond a l'id de la colocation sur laquelle on souhaite filtrer les membres"
			},
			"response": []
		}
	]
}